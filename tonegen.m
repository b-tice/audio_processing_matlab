
% Brian Tice
% 10/5/2022
% MUSIC 270A

function y = tonegen(f,dur,waveform,nharm,fs)
% y = tonegen(f, dur, 'waveform', nharm, fs) where
% f is the fundamental frequency in Hz
% dur is the duration in seconds,
% 'waveform' is either a sine, square, triangle or sawtooth wave,
% nharm is the number of harmonics, and
% fs is the sampling rate 

    nT = 0:1/fs:dur-1/fs;
    
    switch waveform

        case 'sine'

            y = sin(2*pi*f*nT);
            plot(y);
            
            audiowrite('tone.wav',y,fs);
            disp('sine')


        case 'square'

            % The square wave is composed only of odd-numbered harmonics w/ 
            % amplitudes in the ratio 1/n, where n is the harmonic number. 
            % Hint: use a zero-phase sine wave.

            y = 0;

            for i = 1:nharm

                if mod(i,2) == 1

                    y = y + ( (1/i) * sin(2*pi*f*i*nT));
                end

            end

            plot(y);

            audiowrite('tone.wav',y,fs); 
            disp('square');


        case 'triangle'

            % The triangle wave is composed only of odd-numbered harmonics 
            % with amplitudes in the ratio 1/n2, where m is the index of 
            % harmonics present, and n is the harmonic number. That is, every
            % other harmonic of the harmonics present is "out of phase". 
            % Hint: use a zero-phase cosine wave
            % OR consider either adding a phase term or alternating the
            % polarity of the amplitude so every other harmonic is "out of phase‚Äù.

            y = 0;
            phase = 0;

            for i = 1:nharm

                if mod(i,2) == 1

                    if phase == 0
                    
                        y = y + ( (1/i^2) * sin(2*pi*f*i*nT));
                        phase = 1;
                    else

                       y = y + ( (1/i^2) * sin(2*pi*f*i*nT+ pi));
                       phase = 0;
                    
                    end
                end

            end

            % attenuate to avoid clipping
            y = y * 0.8;

            plot(y);

            audiowrite('tone.wav',y,fs);
            disp('triangle')


        case 'sawtooth'

            % The sawtooth wave has both odd- and even-numbered harmonics, 
            % with amplitudes in the ratio 1/n.
            % Hint: use a zero-phase sine wave.

            y = 0;

            for i = 1:nharm
                  
                    y = y + ((1/i) * sin(2*pi*f*i*nT));
            end

            % attenuate to avoid clipping
            y = y * 0.5;
        
            plot(y);

            audiowrite('tone.wav',y,fs);
            disp('sawtooth')

        case 'Bb_Clar_ff_D3'


            % fundamental frequency: 146 Hz, Magnitude 1.0
            % 2nd harmonic: 292 Hz,  0.04 Magnitude
            % 3rd harmonic: 439 Hz,  0.46 Magnitude
            % 4th harmonic: 585 Hz,  0.09 Magnitude
            % 5th harmonic: 731 Hz,  0.37 Magnitude
            % 6th harmonic: 877 Hz,  0.14 Magnitude
            % 7th harmonic: 1023 Hz, 0.16 Magnitude
            % 8th harmonic: 1169 Hz, 0.31 Magnitude 
            % 9th harmonic: 1315 Hz, 0.12 Magnitude
            % 10th harmonic: 1462 Hz, 0.12 Magnitude
            % 11th harmonic: 1608 Hz, 0.12 Magnitude
            % 12th harmonic: 1754 Hz, 0.05 Magnitude



            y = 0;

            harmonic = [146, 292, 439, 585, 731, 877, 1023, 1169, 1315, 1462, 1608, 1754];
            amp = [1.0, 0.04, 0.46, 0.09, 0.37, 0.14, 0.16, 0.31, 0.12, 0.12, 0.12, 0.05];

            for i = 1:12

                y = y + amp(i)*sin(2*pi*harmonic(i)*nT);
            end

            
            % normalize
            y = y/max(abs(y));    % for mono

            plot(y);
            audiowrite('clar.wav',y,fs);


            disp('Clarinet Additive Synthesis')

        otherwise

            disp("please enter a value of 'sine','square','triangle', or 'sawtooth'")
    end
end

% Note: The tonegen function was tested by creating 100hz, 440hz and 1000hz 
% tones of each type and then listening to them and observing the spectrum 
% plot generated by the frequency analyzer in audacity.

